Bubble Sort Implementation
#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

int main() {
    int numbers[100000];
    for (int i = 0; i < 100000; ++i) {
        numbers[i] = 100000 - i;
    }

    int n = sizeof(numbers) / sizeof(numbers[0]);
    clock_t start = clock();

    bubbleSort(numbers, n);

    clock_t end = clock();
    double duration = double(end - start) / CLOCKS_PER_SEC;
    cout << "Execution time for Bubble Sort: " << duration << " seconds" << endl;
    cout << "First 10 integers after sorting:" << endl;
    for (int i = 0; i < 10; ++i) {
        cout << numbers[i] << " ";
    }
    cout << endl;

    cout << "Last 10 integers after sorting:" << endl;
    for (int i = 99990; i < 100000; ++i) {
        cout << numbers[i] << " ";
    }






STL Sort Implementation
#include <iostream>
using namespace std;

int main() {
    int numbers[100000];
    for (int i = 0; i < 100000; ++i) {
        numbers[i] = 100000 - i;
    }
    int n = sizeof(numbers) / sizeof(numbers[0]);
    clock_t start = clock();
    sort(numbers, numbers + n);
    clock_t end = clock();
    double duration = double(end - start) / CLOCKS_PER_SEC;
    cout << "Execution time for STL Sort: " << duration << " seconds" << endl;
    cout << "First 10 integers after sorting:" << endl;
    for (int i = 0; i < 10; ++i) {
        cout << numbers[i] << " ";
    }
    cout << endl;
    cout << "Last 10 integers after sorting:" << endl;
    for (int i = 99990; i < 100000; ++i) {
        cout << numbers[i] << " ";
    }
    cout << endl;
    return 0;
}
    cout << endl;
    return 0;
}
